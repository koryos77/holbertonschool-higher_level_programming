# Test cases for matrix_divided function

# Import the function
>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Test with a valid matrix and divisor
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test that the original matrix is unchanged
>>> print(matrix)
[[1, 2, 3], [4, 5, 6]]

# Test with a matrix containing floats
>>> matrix = [[1.1, -2.2, 3.3], [4.4, 5.5, -6.6]]
>>> print(matrix_divided(matrix, 2))
[[0.55, -1.1, 1.65], [2.2, 2.75, -3.3]]

# Test with div as a float
>>> print(matrix_divided([[1, 2, 3], [4, 5, 6]], 2.5))
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

# Test with invalid matrix (not a list of lists)
>>> matrix_divided([1, 2, 3], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with rows of different sizes
>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test with invalid div (not a number)
>>> matrix_divided([[1, 2], [3, 4]], "2")
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test with div as zero
>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero
