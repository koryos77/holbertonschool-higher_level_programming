# Test cases for BaseGeometry class

# Import the class
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

bg = BaseGeometry()

# Test area method (should raise an exception)
>>> try:
>>>     print(bg.area())
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[Exception] area() is not implemented

# Test area method with arguments (should raise a TypeError)
>>> try:
>>>     bg.area(8)
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] area() takes 1 positional argument but 2 were given

# Test class instantiation
>>> bg = BaseGeometry()
>>> isinstance(bg, BaseGeometry)
True

# Test instantiation with arguments (should raise a TypeError)
>>> try:
>>>     bg = BaseGeometry(None)
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] BaseGeometry() takes 0 positional arguments but 1 was given

# Test documentation length
>>> module = __import__('7-base_geometry')
>>> len(module.__doc__) > 1
True
>>> len(module.BaseGeometry.__doc__) > 1
True
>>> len(module.BaseGeometry.area.__doc__) > 1
True
>>> len(module.BaseGeometry.integer_validator.__doc__) > 1
True

# Test integer_validator with valid cases (should not raise any exception)
>>> bg.integer_validator("my_int", 12)
>>> bg.integer_validator("width", 89)
>>> bg.integer_validator("positive", 1)

# Test integer_validator with type errors
>>> try:
>>>     bg.integer_validator("name", "John")
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

>>> try:
>>>     bg.integer_validator("age", 0)
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

>>> try:
>>>     bg.integer_validator("distance", -4)
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

>>> try:
>>>     bg.integer_validator("average", 7.8)
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] average must be an integer

>>> try:
>>>     bg.integer_validator("name", None)
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# Test integer_validator with different data types
>>> try:
>>>     bg.integer_validator("name", [3])
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

>>> try:
>>>     bg.integer_validator("name", (3,))
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

>>> try:
>>>     bg.integer_validator("name", {3, 4})
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

>>> try:
>>>     bg.integer_validator("name", True)
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# Test integer_validator with wrong number of arguments (should raise a TypeError)
>>> try:
>>>     bg.integer_validator("age", 1, 2)
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() takes 3 positional arguments but 4 were given

# Test integer_validator with missing arguments (should raise a TypeError)
>>> try:
>>>     bg.integer_validator()
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> try:
>>>     bg.integer_validator("age")
>>> except Exception as e:
>>>     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 1 required positional argument: 'value'

# Test name validation with various cases
>>> bg.integer_validator(None, 1)
>>> bg.integer_validator(123, 1)
>>> bg.integer_validator("", 1)
